// This gives the density of the binomial distribution

dbinom = function(x,n,p) {
  return Math.exp(
      (x*Math.log(p)) - (x*Math.log(1 - p)) + (n*Math.log(1-p)) + (Math.log(factorial(n)/factorial(n-x)))
      )
}

// This gives the cumulative density (distribution function) of the binomial distribution

pbinom = function(x,n,p) {

var densities =  _.range(0,x,1).map(function(z) {return dbinom(z,n,p,1);});

return densities.reduce(function(a,b) {return a + b;});
}

// This function calculates the factorial of an integer

factorial = function(n) 
{ 
var x=1; 
while(n>1) 
x*=(n--); 
return x; 
}

// This function calculates the mean

mean = function(values) {
    var sum = values.reduce(function(a,b) {return a + b;});
    return sum/values.length;                        
                             };

// This function calculates the standard deviation

sd = function(values) {
  var resid = _.range(0,values.length,1).map(function (x) {return Math.pow(values[x] - mean(values),2)});
  var sumResid = resid.reduce(function(a,b) {return a + b;});
  return Math.sqrt(sumResid/(values.length-1));
                           };

// This function generates a single random number from a standard normal distribution

Math.nrand = function() {
  
  var x1, x2, rad;
 
	do {
		x1 = 2 * this.random() - 1;
		x2 = 2 * this.random() - 1;
		rad = x1 * x1 + x2 * x2;
	} while(rad >= 1 || rad == 0);
 
	var c = this.sqrt(-2 * Math.log(rad) / rad);
 
	return x1 * c;
};

// This function creates a sample of random numbers, of specified size, from a normal distribution with specified mean and SD

createSample = function(meanval, sdval, size) {
  
   return _.range(1,size,1).map(function() {return  sdval*Math.nrand() + meanval;});
};

// This function simulates a sampling distribution of sample means, specifying the population mean and SD, the sample size, plus the number of samples the distribution is based on         

simulateSamplingDistribution = function(meanval,sdval,size,nsim) {
  
  return _.range(1,nsim,1).map(function() {return mean(createSample(meanval,sdval,size));}); 
};



// This function calculates the weighted mean

wtMean = function(values, weights) {
    var wtvalues = _.range(0,values.length,1).map(function(x) {return values[x]*weights[x];});
    var sum = wtvalues.reduce(function(a,b) {return a + b;});
    var length = weights.reduce(function(a,b) {return a + b;});
    return sum/length;                        
                             };
